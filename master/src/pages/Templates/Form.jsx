import React from 'react';
import {
  Button,
  Card,
  Form,
  message,
  Popconfirm,
  Checkbox,
  Input,
  InputNumber,
  Radio,
  Select,
  Anchor,
} from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import { EditableProTable, ProFormDigitRange, PageContainer } from '@ant-design/pro-components';
import ApplyItem from '@/components/ApplyItem';
import loadApplyItem from '@/components/ApplyItem/loadApplyItem';
import BaseCascader from '@/components/BaseCascader';
import BaseDatePicker from '@/components/BaseDatePicker';
import EmailSearch from '@/components/EmailSearch';
import FileUpload from '@/components/FileUpload';
import { UPLOAD_TYPE } from '@/components/FileUpload/fileUtils';
import FormItemGroup from '@/components/FormItemGroup';
import QuillEditer from '@/components/QuillEditer';
import { useEditableProTableParams } from '@/utils/hooks';
import { isEmptyArray } from '@/utils/utils';
import { FORM_ITEM_TYPE } from '@/common/enum';
import { PATTERN } from '@/common/pattern';
import { getNormalRules } from '@/common/project';
import styles from './index.less';

const FORM_LAYOUT = {
  sm: 24,
  md: 12,
  xl: 8,
};

const ACTION = `https://mock.apifox.cn/m1/1961007-0-default/api/v1/file/upload`;
const ZIPACTION = `https://mock.apifox.cn/m1/1961007-0-default/api/v1/file/upload/compressed-file`;
const request = (action, props) => {
  console.log('action', action, 'props', props);
  return Promise.resolve({
    code: 0,
    data: { fileKey: 'sss', fileName: 'xxx.jpg' },
  });
};
const fetchXXX = () => {
  return Promise.resolve({
    code: 0,
    data: { fileKey: 'sss', fileName: 'xxx.jpg' },
  });
};
const defaultOptions = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
];
const proTableColumns = [
  {
    title: 'Ê¥ªÂä®ÂêçÁß∞',
    dataIndex: 'title',
    width: '30%',
  },
  {
    title: 'Áä∂ÊÄÅ',
    key: 'state',
    dataIndex: 'state',
    valueType: 'select',
    valueEnum: {
      all: { text: 'ÂÖ®ÈÉ®', status: 'Default' },
      open: {
        text: 'Êú™Ëß£ÂÜ≥',
        status: 'Error',
      },
      closed: {
        text: 'Â∑≤Ëß£ÂÜ≥',
        status: 'Success',
      },
    },
  },
  {
    title: 'ÈÇÆÁÆ±',
    dataIndex: 'email',
    formItemProps: {
      rules: [
        {
          required: true,
          message: 'Ê≠§È°πÊòØÂøÖÂ°´È°π',
        },
      ],
    },
    renderFormItem: () => {
      return <EmailSearch />;
    },
  },
  {
    title: 'ÈôÑ‰ª∂',
    dataIndex: 'file',
    renderFormItem: (_, { record }) => {
      return (
        <FileUpload
          uploadType={UPLOAD_TYPE.PICTURE.code}
          accept={['png', 'jpeg', 'jpg']}
          fileLen={1}
          action={ACTION}
        />
      );
    },
    render: (val) => {
      return <ApplyItem value={val} type="file" />;
    },
  },
  {
    title: 'Êìç‰Ωú',
    valueType: 'option',
    render: () => '-',
  },
];

const anchorList = [
  {
    key: 'part-1',
    href: '#part-1',
    title: '‰∏öÂä°Á§∫‰æã',
  },
  {
    key: 'part-2',
    href: '#part-2',
    title: 'Êó•ÊúüÁ§∫‰æã',
  },
  {
    key: 'part-3',
    href: '#part-3',
    title: 'Êñá‰ª∂‰∏ä‰º†Á§∫‰æã',
  },
];
export default function Detail({ readonly = false }) {
  const proTableParams = useEditableProTableParams();
  const { form } = Form.useForm();
  const handleSave = () => {
    const values = form?.getFieldsValue();
    console.log('üöÄ ~ file: Form.jsx:110 ~ handleSave ~ values', values);
    // TODO: ‰øùÂ≠òËØ∑Ê±Ç
    message.success('‰øùÂ≠òÊàêÂäü');
  };

  const handleSubmit = () => {
    form.validateFields().then((values) => {
      console.log('üöÄ ~ file: Form.jsx:117 ~ handleSubmit ~ values', values);
      // TODO: Êèê‰∫§ËØ∑Ê±Ç
      message.success('Êèê‰∫§ÊàêÂäü');
    });
  };

  return (
    <PageContainer
      title="Ë°®Âçï"
      breadcrumb={null}
      footer={[
        <Button key="save" onClick={handleSave}>
          ‰øùÂ≠ò
        </Button>,
        <Popconfirm title="Á°ÆËÆ§Êèê‰∫§ÂêóÔºü" key="submit" onConfirm={handleSubmit}>
          <Button key="submit" type="primary">
            Êèê‰∫§
          </Button>
        </Popconfirm>,
      ]}
    >
      <div className={styles.formContainer}>
        <Card bordered={false}>
          <Form
            name="base-form"
            form={form}
            onValuesChange={(_, values) => {
              console.log(values);
            }}
            layout="horizontal"
            requiredMark={readonly ? false : true}
          >
            <Card title="‰∏öÂä°Á§∫‰æã" type="inner" id="part-1">
              <FormItemGroup>
                <Form.Item
                  name="entName"
                  label="‰ºÅ‰∏öÂêçÁß∞"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('‰ºÅ‰∏öÂêçÁß∞', {
                    pattern: PATTERN.CH_EN,
                    maxLen: 20,
                  })}
                  validateFirst
                >
                  {loadApplyItem(<Input placeholder="ËØ∑ËæìÂÖ•" />, !readonly)}
                </Form.Item>
                <Form.Item
                  name="endCode"
                  label="Áªü‰∏ÄÁ§æ‰ºö‰ø°Áî®‰ª£Á†Å"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Áªü‰∏ÄÁ§æ‰ºö‰ø°Áî®‰ª£Á†Å', {
                    pattern: PATTERN.CREDIT_CODE,
                    validateLen: false,
                  })}
                  validateFirst
                >
                  {loadApplyItem(<Input placeholder="ËØ∑ËæìÂÖ•" />, !readonly)}
                </Form.Item>
                <Form.Item
                  name="mobile"
                  label="ËÅîÁ≥ªÊñπÂºè"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('ËÅîÁ≥ªÊñπÂºè', {
                    pattern: PATTERN.PHONE,
                    validateLen: false,
                  })}
                  validateTrigger="onBlur"
                  validateFirst
                >
                  {loadApplyItem(<Input placeholder="ËØ∑ËæìÂÖ•" />, !readonly)}
                </Form.Item>

                <Form.Item
                  name="status"
                  label="‰ºÅ‰∏öÁä∂ÊÄÅ"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('‰ºÅ‰∏öÁä∂ÊÄÅ', { select: true })}
                  validateFirst
                >
                  {loadApplyItem(
                    <Select placeholder="ËØ∑ÈÄâÊã©">
                      {[
                        {
                          value: 'enable',
                          label: 'ÂêØÁî®‰∏≠',
                        },
                        {
                          value: 'disable',
                          label: 'Á¶ÅÁî®‰∏≠',
                        },
                      ].map((item) => (
                        <Select.Option value={item.value} key={item.value}>
                          {item.label}
                        </Select.Option>
                      ))}
                    </Select>,
                    !readonly,
                  )}
                </Form.Item>
                <Form.Item
                  name="type"
                  label="‰ºÅ‰∏öÁ±ªÂûã"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('‰ºÅ‰∏öÁ±ªÂûã', { select: true })}
                  validateFirst
                >
                  {loadApplyItem(
                    <Radio.Group buttonStyle="solid">
                      {[
                        {
                          label: 'Â∑•‰∏ö',
                          value: 'a',
                        },
                        {
                          label: 'ÂÜú‰∏ö',
                          value: 'b',
                        },
                      ].map((item) => (
                        <Radio.Button value={item.value} key={item.value}>
                          {item.label}
                        </Radio.Button>
                      ))}
                    </Radio.Group>,
                    !readonly,
                  )}
                </Form.Item>
                <Form.Item
                  name="level"
                  label="Á∫ßÂà´"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Á∫ßÂà´', { select: true })}
                  validateFirst
                >
                  {loadApplyItem(
                    <Checkbox.Group>
                      {['A', 'B', 'C', 'D', 'E', 'F'].map((v) => (
                        <Checkbox value={v} key={v}>
                          {v}
                        </Checkbox>
                      ))}
                    </Checkbox.Group>,
                    !readonly,
                  )}
                </Form.Item>
              </FormItemGroup>
              <FormItemGroup>
                <Form.Item
                  name="address"
                  label="ËÅîÁ≥ªÂú∞ÂùÄ"
                  colProps={{
                    ...FORM_LAYOUT,
                    xl: 16,
                  }}
                >
                  {loadApplyItem(<Input.TextArea maxLength={200} showCount />, !readonly)}
                </Form.Item>
              </FormItemGroup>
              <FormItemGroup>
                <Form.Item
                  name="email"
                  label="ÈÇÆÁÆ±"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('ÈÇÆÁÆ±', {
                    pattern: PATTERN.EMAIL,
                    validateLen: false,
                  })}
                  validateFirst
                >
                  {loadApplyItem(<EmailSearch placeholder="ËØ∑ËæìÂÖ•ÈÇÆÁÆ±" />, !readonly)}
                </Form.Item>
                <Form.Item
                  name="date"
                  label="Êó•Êúü"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Êó•Êúü', {
                    select: true,
                  })}
                  validateFirst
                >
                  {loadApplyItem(
                    <BaseDatePicker
                      type={FORM_ITEM_TYPE.DATE.code}
                      placeholder="ËØ∑ÈÄâÊã©Êó•Êúü"
                      formatTimeStamp={false}
                    />,
                    !readonly,
                  )}
                </Form.Item>
                <ProFormDigitRange
                  name="numRange"
                  label="Êï∞ÂÄºÂå∫Èó¥"
                  colProps={FORM_LAYOUT}
                  fieldProps={{ precision: 2 }}
                  rules={[
                    {
                      validator: (_, val) => {
                        const [num1, num2] = val || [];
                        if (!val || num1 === undefined || num2 === undefined) {
                          return Promise.reject(new Error('ËØ∑ËæìÂÖ•Êï∞ÂÄº'));
                        }
                        return Promise.resolve();
                      },
                    },
                  ]}
                  validateTrigger="onBlur"
                  required
                  readonly={readonly}
                />
                <Form.Item
                  name="num"
                  label="Âçï‰∏ÄÊï∞ÂÄº"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Êï∞ÂÄº', {
                    required: true,
                    validateLen: false,
                  })}
                  validateFirst
                >
                  {loadApplyItem(
                    <InputNumber
                      min={0}
                      max={999999}
                      precision={0}
                      placeholder="ËØ∑ËæìÂÖ•"
                      style={{ width: '100%' }}
                    />,
                    !readonly,
                  )}
                </Form.Item>
                <Form.Item
                  label="ÈôÑ‰ª∂"
                  name="file"
                  colProps={FORM_LAYOUT}
                  rules={[
                    {
                      validator: (_, val) => {
                        if (isEmptyArray(val)) {
                          return Promise.reject(new Error('ËØ∑‰∏ä‰º†ÈôÑ‰ª∂'));
                        }
                        return Promise.resolve();
                      },
                    },
                  ]}
                  validateFirst
                  required
                >
                  <FileUpload
                    accept={['pdf', 'doc', 'docx']}
                    fileLen={1}
                    limitSize={20}
                    uploadType={UPLOAD_TYPE.BUTTON.code}
                    action={ACTION}
                    tooltipTitle="‰ªÖÊîØÊåÅ.pdf,.doc,.docxÂêéÁºÄÁöÑÊñá‰ª∂ÔºåÊñá‰ª∂Â§ßÂ∞è‰∏çÂæóË∂ÖËøá20M"
                    readonly={readonly}
                  />
                </Form.Item>
                <Form.Item
                  name="area"
                  label="Âú∞Âå∫ÔºàÁ∫ßËÅîÔºâ"
                  colProps={FORM_LAYOUT}
                  rules={[
                    {
                      validator: (_, val) => {
                        if (!val || isEmptyArray(val)) {
                          return Promise.reject(new Error('ËØ∑ÈÄâÊã©Âú∞Âå∫'));
                        }
                        return Promise.resolve();
                      },
                    },
                  ]}
                  validateFirst
                  required
                >
                  {loadApplyItem(
                    <BaseCascader
                      placeholder="ËØ∑ÈÄâÊã©"
                      defaultOptions={defaultOptions}
                      isFetch={false}
                      fieldNames={{ label: 'label', value: 'value' }}
                      changeOnSelect={false}
                    />,
                    !readonly,
                    'text',
                    (val) => val?.join('/') || '-',
                  )}
                </Form.Item>
              </FormItemGroup>
              <Form.Item
                label="ÂØåÊñáÊú¨ÁºñËæë"
                name="content"
                rules={[
                  {
                    required: true,
                    message: 'ËØ∑ËæìÂÖ•Ê≠£ÊñáÊñáÊú¨',
                  },
                ]}
              >
                <QuillEditer />
              </Form.Item>
              <Form.Item name="list1" trigger="onValuesChange" noStyle>
                <EditableProTable
                  headerTitle="ÂèØÁºñËæëË°®Ê†ºÁ§∫‰æã"
                  rowKey="id"
                  columns={proTableColumns}
                  {...proTableParams.props}
                  recordCreatorProps={readonly ? false : proTableParams.props?.recordCreatorProps}
                  toolBarRender={null}
                  maxLength={5}
                  readonly={readonly}
                />
              </Form.Item>
            </Card>
            <Card title="Êó•ÊúüÁ§∫‰æã" type="inner" style={{ marginTop: 20 }} id="part-2">
              <FormItemGroup>
                <Form.Item
                  name="date"
                  label="Êó•Êúü"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Êó•Êúü', {
                    select: true,
                  })}
                  validateFirst
                >
                  <BaseDatePicker
                    type={FORM_ITEM_TYPE.DATE.code}
                    placeholder="ËØ∑ÈÄâÊã©Êó•Êúü"
                    formatTimeStamp={false} //  ‰∏ç‰ΩøÁî®Êó∂Èó¥Êà≥ËøîÂõû
                    disabledAfter // ÂèØÈÄâËåÉÂõ¥ÔºöÂΩìÂ§©ÂæÄÂâç‰∏§Âπ¥Âà∞ÂΩìÂ§©ÂæÄÂêé‰∏ÄÂπ¥
                    disabledAfterLimit={1}
                    disabledBefore
                    disabledBeforeLimit={2}
                  />
                </Form.Item>
                <Form.Item
                  name="year"
                  label="Âπ¥‰ªΩ"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Êó•Êúü', {
                    select: true,
                  })}
                  validateFirst
                >
                  <BaseDatePicker
                    picker="year"
                    format="YYYY"
                    disabledBefore
                    type={FORM_ITEM_TYPE.DATE.code}
                    placeholder="ËØ∑ÈÄâÊã©Âπ¥‰ªΩ"
                  />
                </Form.Item>
                <Form.Item
                  name="dateRange"
                  label="Êó∂Èó¥ÊÆµ"
                  colProps={FORM_LAYOUT}
                  rules={getNormalRules('Êó•Êúü', {
                    select: true,
                  })}
                  validateFirst
                >
                  <BaseDatePicker
                    disabledAfter
                    disabledAfterLimit={1} // ÂèØÈÄâËåÉÂõ¥ÔºöÊà™Ê≠¢Âà∞ÂΩìÂ§©ÂæÄÂêé‰∏ÄÂ§©
                    disabledLimitUnit="days"
                    onChange={(value) => console.log('dateRange', value)}
                  />
                </Form.Item>
              </FormItemGroup>
            </Card>

            <Card title="Êñá‰ª∂‰∏ä‰º†Á§∫‰æã" type="inner" style={{ marginTop: 20 }} id="part-3">
              <Form.Item label="ÊåâÈíÆÊñá‰ª∂‰∏ä‰º†" name="file1">
                <FileUpload
                  accept={[]}
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.BUTTON.code}
                  action={ACTION}
                  tooltipTitle=""
                />
              </Form.Item>
              <Form.Item label="ÂõæÁâá‰∏ä‰º†" name="file2">
                <FileUpload
                  accept={['jpg', 'jpeg', 'png']}
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.PICTURE.code}
                  action={ACTION}
                  tooltipTitle=""
                />
              </Form.Item>
              <Form.Item label="ÂõæÁâáË£ÅÂâ™‰∏ä‰º†" name="file22">
                <FileUpload
                  accept={['jpg', 'jpeg', 'png']}
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.PICTURE.code}
                  action={ACTION}
                  crop
                  tooltipTitle=""
                  imgCropProps={{}} // Ë£ÅÂâ™Â±ûÊÄß
                />
              </Form.Item>
              <Form.Item label="Êñá‰ª∂ÊãñÊãΩ‰∏ä‰º†" name="file3">
                <FileUpload
                  accept={['jpg', 'jpeg', 'png']}
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.DRAG.code}
                  action={ACTION}
                  tooltipTitle=""
                />
              </Form.Item>
              <Form.Item label="Ëá™ÂÆö‰πâÊñá‰ª∂‰∏ä‰º†" name="file4">
                <FileUpload
                  fileLen={10}
                  accept={[]}
                  uploadType={UPLOAD_TYPE.CUSTOM.code}
                  action={ACTION}
                  transferBlob
                  reqFileMap={{ file: 'contentBase64', fileName: 'originName' }}
                  customUpload
                  request={request}
                  extraParams={{ recordId: 2 }} // ‰∏ä‰º†Êñá‰ª∂ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Ç‰º†ÁªôÂêéÁ´ØÈúÄË¶ÅÂΩìÂâçËÆ∞ÂΩïrecordId
                >
                  <a>
                    <UploadOutlined /> ‰∏ä‰º†
                  </a>
                </FileUpload>
              </Form.Item>
              <Form.Item label="ÂéãÁº©ÂåÖËß£ÂéãÊñá‰ª∂‰∏ä‰º†" name="file5">
                <FileUpload
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.BUTTON.code}
                  accept={['zip', 'jpeg', 'png', 'pdf', 'xlsx', 'xls']}
                  action={ACTION}
                  tooltipTitle="‰ªÖÊîØÊåÅzipÔºåjpeg, png, pdf"
                  unZipAction={ZIPACTION}
                  unZipFile
                />
              </Form.Item>
              <Form.Item label="Ëá™ÂÆö‰πâÊñá‰ª∂‰∏ä‰º†ÊñπÊ≥ïÔºà‰º†ÂÖ•requestÔºâ" name="file9">
                <FileUpload
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.BUTTON.code}
                  accept={['zip', 'jpeg', 'png', 'pdf']}
                  action={ACTION}
                  tooltipTitle="‰ªÖÊîØÊåÅzipÔºåjpeg, png, pdf"
                  customUpload
                  request={request}
                />
              </Form.Item>
              <Form.Item label="Ëá™ÂÆö‰πâÊñá‰ª∂‰∏ä‰º†ÊñπÊ≥ï(‰º†ÂÖ•ÂºÇÊ≠•ÂáΩÊï∞Ôºâ" name="file10">
                <FileUpload
                  fileLen={10}
                  uploadType={UPLOAD_TYPE.BUTTON.code}
                  accept={['zip', 'jpeg', 'png', 'pdf']}
                  action={ACTION}
                  tooltipTitle="‰ªÖÊîØÊåÅzipÔºåjpeg, png, pdf"
                  ignoreAction
                  customUpload
                  request={(props) => {
                    console.log('props', props);
                    const { data, processData, method, config } = props;
                    return fetchXXX({ data, processData, method, config }); // ‰º†ÂÖ•ÊâÄÈúÄÂèÇÊï∞
                  }}
                />
              </Form.Item>
            </Card>
          </Form>
        </Card>
        <Anchor offsetTop={160}>
          {anchorList.map((item) => (
            <Anchor.Link key={item.key} {...item} />
          ))}
        </Anchor>
      </div>
    </PageContainer>
  );
}
